//Уроки 35-37. Введение в тестирование

/**
 * Сопоставление полученного результата с ожидаемым называется - assert
 * Если тест завален формируется специальное исключение AssertionError
 *
 * TDD - Test Driven Development - разработка через тестирование (одна из парадигм разработки)
 *
 * Крутой разработчик:
 * 1) Сначала разработчик создает конкретные цели для будущей программы
 * 2) Далее он пишет тесты исходя из целей на программу
 * 3) Далее пишет программу, которая эти тесты проходит
 *
 * JUNIT основные правила:
 * 1)Каждый тестовый сценарий(test case) - отдельный метод.
 * Методы необходимо помечать анотацией @Test
 *
 * 2)Существуеют вспомогательные методы с аннотациями @Before,@BeforeClass,@After,@AfterClass и т.д.
 *
 * 3)Тестовый класс необходимо называть с суффиксом Test(например Vector2DTest)
 *
 * 4)Тестовые методы желательно должны содержать "should" в названии (например sumShouldBePositive)
 *
 * Аннотация @Test объявляет метод (обязательно public void) тестовым!
 * Аннотация @Test может использовать параметры:
 * expected - код в тесте проверяется на генерацию определенного исключения
 * timeout - код в тест должен отработать не более указанного времени (иначе тест завален)
 *
 * Класс Assert - проверка "ожидание/реальность" (expected/actual)
 * Методы (являются статическими):
 * assertTrue()
 * assertFalse()
 * assertEquals()
 * assertArrayEquals()
 * assertNotEquals()
 * assertSame()
 * assertNotSame()
 *
 * fail - гарантированное падение теста
 *
 */

public class GUnitPart1 {
    public static void main(String[] args) {
    }
}
